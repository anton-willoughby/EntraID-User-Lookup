# Simple Microsoft Graph PowerShell GUI for Single User Lookup
# Author: Generated by GitHub Copilot
# Date: July 8, 2025
# Optimized to import only required Microsoft Graph sub-modules for faster loading:
# - Microsoft.Graph.Authentication (for Connect-MgGraph, Disconnect-MgGraph, Get-MgContext, Clear-MgContext)
# - Microsoft.Graph.Users (for Get-MgUser commands)

# Add required assemblies for Windows Forms
Add-Type -AssemblyName System.Windows.Forms
Add-Type -AssemblyName System.Drawing

# Global variables
$global:IsConnected = $false
$script:connectionTimer = $null

# Function to connect to Microsoft Graph
function Connect-ToGraph {
    try {
        # Check if already connecting
        if ($connectButton.Enabled -eq $false -and $cancelButton.Visible -eq $true) {
            [System.Windows.Forms.MessageBox]::Show(
                "Connection already$usernameTextBox.Size = New-Object System.Drawing.Size(460, 20)in progress. Please wait...",
                "Connection In Progress",
                [System.Windows.Forms.MessageBoxButtons]::OK,
                [System.Windows.Forms.MessageBoxIcon]::Information
            )
            return
        }
        
        Update-StatusLabel "Checking Microsoft Graph modules..."
        
        # Check if required modules are installed
        if (-not (Get-Module -ListAvailable -Name Microsoft.Graph.Authentication) -or 
            -not (Get-Module -ListAvailable -Name Microsoft.Graph.Users)) {
            $result = [System.Windows.Forms.MessageBox]::Show(
                "Microsoft Graph PowerShell modules are not installed. Do you want to install them now?",
                "Modules Required",
                [System.Windows.Forms.MessageBoxButtons]::YesNo,
                [System.Windows.Forms.MessageBoxIcon]::Question
            )
            
            if ($result -eq [System.Windows.Forms.DialogResult]::Yes) {
                if (-not (Install-GraphModule)) {
                    return
                }
            } else {
                Update-StatusLabel "Module installation cancelled"
                return
            }
        }
        
        # Import only required sub-modules for faster loading
        Update-StatusLabel "Importing Microsoft Graph modules..."
        Import-Module Microsoft.Graph.Authentication -Force
        Import-Module Microsoft.Graph.Users -Force
        
        # Update UI for connection in progress
        $connectButton.Enabled = $false
        $disconnectButton.Enabled = $false
        $clearCredsButton.Enabled = $false
        $cancelButton.Enabled = $true
        $cancelButton.Visible = $true
        
        # Start connection with a small delay to allow UI to update
        $script:connectionTimer = New-Object System.Windows.Forms.Timer
        $script:connectionTimer.Interval = 100  # Very short delay
        $script:connectionTimer.Add_Tick({
            $script:connectionTimer.Stop()
            $script:connectionTimer.Dispose()
            
            try {
                Update-StatusLabel "Launching authentication window... Please check your browser"
                [System.Windows.Forms.Application]::DoEvents()
                
                # Try interactive authentication first
                try {
                    Connect-MgGraph -Scopes @("User.Read.All", "Directory.Read.All") -NoWelcome -ErrorAction Stop
                    $authSuccess = $true
                }
                catch {
                    $interactiveError = $_.Exception.Message
                    Write-Host "Interactive auth failed: $interactiveError"
                    
                    # If interactive fails, try device code
                    try {
                        Update-StatusLabel "Browser authentication failed. Starting device code authentication..."
                        [System.Windows.Forms.Application]::DoEvents()
                        
                        # Clean up any partial connection
                        try { Disconnect-MgGraph -ErrorAction SilentlyContinue } catch {}
                        
                        Connect-MgGraph -Scopes @("User.Read.All", "Directory.Read.All") -UseDeviceAuthentication -NoWelcome -ErrorAction Stop
                        $authSuccess = $true
                    }
                    catch {
                        throw "Authentication failed: $($_.Exception.Message)"
                    }
                }
                
                # Check if connection was successful
                $context = Get-MgContext
                if ($context) {
                    $global:IsConnected = $true
                    Update-StatusLabel "Connected to Microsoft Graph - Ready to search users"
                    Update-ConnectionStatus "Connected - Tenant: $($context.TenantId)"
                    
                    # Test the connection
                    try {
                        $currentUser = Get-MgUser -UserId $context.Account -ErrorAction SilentlyContinue
                        if ($currentUser) {
                            Update-StatusLabel "Connection verified - Ready to search users"
                        } else {
                            Update-StatusLabel "Connected but unable to verify permissions"
                        }
                    }
                    catch {
                        Update-StatusLabel "Connected but permissions may be limited"
                    }
                } else {
                    throw "Connection established but no context available"
                }
            }
            catch {
                $global:IsConnected = $false
                Handle-ConnectionError $_.Exception.Message
            }
            finally {
                Reset-ConnectionState
            }
        })
        $script:connectionTimer.Start()
        
    }
    catch {
        [System.Windows.Forms.MessageBox]::Show(
            "Error starting connection: $($_.Exception.Message)",
            "Connection Error",
            [System.Windows.Forms.MessageBoxButtons]::OK,
            [System.Windows.Forms.MessageBoxIcon]::Error
        )
        Update-StatusLabel "Connection failed"
        Reset-ConnectionState
    }
}

# Function to handle connection errors
function Handle-ConnectionError {
    param([string]$ErrorMessage)
    
    $global:IsConnected = $false
    
    # Handle specific error types
    if ($ErrorMessage -like "*user canceled*" -or $ErrorMessage -like "*authentication*cancelled*") {
        Update-StatusLabel "Authentication cancelled by user"
        [System.Windows.Forms.MessageBox]::Show(
            "Authentication was cancelled. Please try connecting again.",
            "Authentication Cancelled",
            [System.Windows.Forms.MessageBoxButtons]::OK,
            [System.Windows.Forms.MessageBoxIcon]::Information
        )
    }
    elseif ($ErrorMessage -like "*insufficient*privileges*" -or $ErrorMessage -like "*access*denied*") {
        Update-StatusLabel "Insufficient permissions"
        [System.Windows.Forms.MessageBox]::Show(
            "Your account does not have sufficient permissions to access Microsoft Graph. Please contact your administrator.",
            "Insufficient Permissions",
            [System.Windows.Forms.MessageBoxButtons]::OK,
            [System.Windows.Forms.MessageBoxIcon]::Warning
        )
    }
    else {
        Update-StatusLabel "Connection failed"
        [System.Windows.Forms.MessageBox]::Show(
            "Failed to connect to Microsoft Graph: $ErrorMessage`n`nTroubleshooting tips:`n• Try running PowerShell as Administrator`n• Check your internet connection`n• Verify you have the correct permissions`n• Try clearing cached credentials`n• Check if your browser is blocking popups",
            "Connection Error",
            [System.Windows.Forms.MessageBoxButtons]::OK,
            [System.Windows.Forms.MessageBoxIcon]::Error
        )
    }
    
    Update-ConnectionStatus "Not Connected"
}

# Function to install Microsoft Graph module
function Install-GraphModule {
    try {
        Update-StatusLabel "Installing Microsoft Graph module..."
        $connectButton.Enabled = $false
        $disconnectButton.Enabled = $false
        $clearCredsButton.Enabled = $false
        
        # Create progress dialog
        $progressForm = New-Object System.Windows.Forms.Form
        $progressForm.Text = "Installing Module"
        $progressForm.Size = New-Object System.Drawing.Size(400, 150)
        $progressForm.StartPosition = [System.Windows.Forms.FormStartPosition]::CenterParent
        $progressForm.FormBorderStyle = [System.Windows.Forms.FormBorderStyle]::FixedDialog
        $progressForm.MaximizeBox = $false
        $progressForm.MinimizeBox = $false
        
        $progressLabel = New-Object System.Windows.Forms.Label
        $progressLabel.Text = "Installing Microsoft Graph PowerShell modules (Authentication & Users only)..."
        $progressLabel.Location = New-Object System.Drawing.Point(20, 20)
        $progressLabel.Size = New-Object System.Drawing.Size(360, 40)
        $progressForm.Controls.Add($progressLabel)
        
        $progressBar = New-Object System.Windows.Forms.ProgressBar
        $progressBar.Location = New-Object System.Drawing.Point(20, 70)
        $progressBar.Size = New-Object System.Drawing.Size(360, 23)
        $progressBar.Style = [System.Windows.Forms.ProgressBarStyle]::Marquee
        $progressForm.Controls.Add($progressBar)
        
        $progressForm.Show()
        $progressForm.Refresh()
        [System.Windows.Forms.Application]::DoEvents()
        
        # Install only required modules for faster installation
        Install-Module -Name Microsoft.Graph.Authentication -Scope CurrentUser -Force -AllowClobber
        Install-Module -Name Microsoft.Graph.Users -Scope CurrentUser -Force -AllowClobber
        
        $progressForm.Close()
        Update-StatusLabel "Microsoft Graph modules installed successfully"
        return $true
        
    }
    catch {
        if ($progressForm) { $progressForm.Close() }
        [System.Windows.Forms.MessageBox]::Show(
            "Failed to install Microsoft Graph modules: $($_.Exception.Message)",
            "Installation Error",
            [System.Windows.Forms.MessageBoxButtons]::OK,
            [System.Windows.Forms.MessageBoxIcon]::Error
        )
        Update-StatusLabel "Module installation failed"
        return $false
    }
    finally {
        $connectButton.Enabled = $true
        $disconnectButton.Enabled = $false
        $clearCredsButton.Enabled = $true
    }
}

# Function to cancel connection
function Cancel-Connection {
    try {
        Update-StatusLabel "Cancelling connection..."
        
        # Stop and dispose of timer if it exists
        if ($script:connectionTimer) {
            $script:connectionTimer.Stop()
            $script:connectionTimer.Dispose()
            $script:connectionTimer = $null
        }
        
        # Try to disconnect any partial connection
        try {
            Disconnect-MgGraph -ErrorAction SilentlyContinue
        }
        catch {
            # Ignore disconnect errors during cancellation
        }
        
        $global:IsConnected = $false
        Update-StatusLabel "Connection cancelled"
        Update-ConnectionStatus "Not Connected"
        
    }
    catch {
        Update-StatusLabel "Error cancelling connection"
    }
    finally {
        Reset-ConnectionState
    }
}

# Function to reset connection state
function Reset-ConnectionState {
    # Re-enable/disable buttons based on connection state
    $connectButton.Enabled = -not $global:IsConnected
    $disconnectButton.Enabled = $global:IsConnected
    $clearCredsButton.Enabled = $true
    $searchButton.Enabled = $global:IsConnected
    $cancelButton.Enabled = $false
    $cancelButton.Visible = $false
}

# Function to test Graph connection
function Test-GraphConnection {
    try {
        # Try to get current user to verify connection
        $currentUser = Get-MgUser -UserId (Get-MgContext).Account -ErrorAction SilentlyContinue
        if ($currentUser) {
            Update-StatusLabel "Connection verified - Ready to search users"
        } else {
            Update-StatusLabel "Connected but unable to verify permissions"
        }
    }
    catch {
        Update-StatusLabel "Connected but unable to verify permissions"
    }
}

# Function to search for a specific user
function Search-SpecificUser {
    param([string]$Username)
    
    if (-not $global:IsConnected) {
        [System.Windows.Forms.MessageBox]::Show(
            "Please connect to Microsoft Graph first.",
            "Not Connected",
            [System.Windows.Forms.MessageBoxButtons]::OK,
            [System.Windows.Forms.MessageBoxIcon]::Warning
        )
        return
    }
    
    if ([string]::IsNullOrWhiteSpace($Username)) {
        [System.Windows.Forms.MessageBox]::Show(
            "Please enter a username to search for.",
            "Username Required",
            [System.Windows.Forms.MessageBoxButtons]::OK,
            [System.Windows.Forms.MessageBoxIcon]::Warning
        )
        return
    }
    
    try {
        Update-StatusLabel "Searching for user: $Username"
        
        # Search for user by various methods
        $user = $null
        
        # Try exact match first
        try {
            $user = Get-MgUser -UserId $Username -ErrorAction SilentlyContinue
        }
        catch {
            # User not found by exact match
        }
        
        # If not found by exact match, try filtering
        if (-not $user) {
            $users = Get-MgUser -Filter "startswith(displayName,'$Username') or startswith(userPrincipalName,'$Username') or startswith(mail,'$Username')" -Top 1
            if ($users) {
                $user = $users[0]
            }
        }
        
        if ($user) {
            # Get full user details
            $userDetails = Get-MgUser -UserId $user.Id -Property @(
                "Id", "DisplayName", "UserPrincipalName", "Mail", "Department", 
                "JobTitle", "AccountEnabled", "CreatedDateTime", "LastSignInDateTime", 
                "CompanyName", "Country", "City", "OfficeLocation", "MobilePhone", 
                "BusinessPhones", "Manager"
            )
            
            Display-UserDetails $userDetails
            Update-StatusLabel "User found: $($userDetails.DisplayName)"
        } else {
            Clear-UserDetails
            Update-StatusLabel "User not found: $Username"
            [System.Windows.Forms.MessageBox]::Show(
                "No user found with the username: $Username",
                "User Not Found",
                [System.Windows.Forms.MessageBoxButtons]::OK,
                [System.Windows.Forms.MessageBoxIcon]::Information
            )
        }
    }
    catch {
        [System.Windows.Forms.MessageBox]::Show(
            "Error searching for user: $($_.Exception.Message)",
            "Search Error",
            [System.Windows.Forms.MessageBoxButtons]::OK,
            [System.Windows.Forms.MessageBoxIcon]::Error
        )
    }
}

# Function to display user details
function Display-UserDetails {
    param([object]$User)
    
    $nameTextBox.Text = $User.DisplayName
    $upnTextBox.Text = $User.UserPrincipalName
    $emailTextBox.Text = $User.Mail
    $departmentTextBox.Text = $User.Department
    $jobTitleTextBox.Text = $User.JobTitle
    $enabledTextBox.Text = $User.AccountEnabled
    $companyTextBox.Text = $User.CompanyName
    $countryTextBox.Text = $User.Country
    $cityTextBox.Text = $User.City
    $officeTextBox.Text = $User.OfficeLocation
    $mobileTextBox.Text = $User.MobilePhone
    $businessPhoneTextBox.Text = ($User.BusinessPhones -join ', ')
    $createdTextBox.Text = $User.CreatedDateTime
    $lastSignInTextBox.Text = $User.LastSignInDateTime
    $userIdTextBox.Text = $User.Id
    
    # Enable export button
    $exportButton.Enabled = $true
}

# Function to clear user details
function Clear-UserDetails {
    $nameTextBox.Clear()
    $upnTextBox.Clear()
    $emailTextBox.Clear()
    $departmentTextBox.Clear()
    $jobTitleTextBox.Clear()
    $enabledTextBox.Clear()
    $companyTextBox.Clear()
    $countryTextBox.Clear()
    $cityTextBox.Clear()
    $officeTextBox.Clear()
    $mobileTextBox.Clear()
    $businessPhoneTextBox.Clear()
    $createdTextBox.Clear()
    $lastSignInTextBox.Clear()
    $userIdTextBox.Clear()
    
    # Disable export button
    $exportButton.Enabled = $false
}

# Function to update status label
function Update-StatusLabel {
    param([string]$Status)
    $statusLabel.Text = $Status
    $statusLabel.Refresh()
    [System.Windows.Forms.Application]::DoEvents()
}

# Function to update connection status
function Update-ConnectionStatus {
    param([string]$Status)
    $connectionLabel.Text = $Status
    if ($Status.StartsWith("Connected")) {
        $connectionLabel.ForeColor = [System.Drawing.Color]::Green
        $connectButton.Enabled = $false
        $disconnectButton.Enabled = $true
        $searchButton.Enabled = $true
    } else {
        $connectionLabel.ForeColor = [System.Drawing.Color]::Red
        $connectButton.Enabled = $true
        $disconnectButton.Enabled = $false
        $searchButton.Enabled = $false
    }
}

# Function to disconnect from Microsoft Graph
function Disconnect-FromGraph {
    try {
        # Disconnect if connected
        if ($global:IsConnected) {
            Update-StatusLabel "Disconnecting from Microsoft Graph..."
            try {
                Disconnect-MgGraph -ErrorAction SilentlyContinue
            }
            catch {
                # Ignore disconnect errors
            }
            $global:IsConnected = $false
        }
        
        Update-StatusLabel "Disconnected from Microsoft Graph"
        Update-ConnectionStatus "Not Connected"
        Clear-UserDetails
        
    }
    catch {
        [System.Windows.Forms.MessageBox]::Show(
            "Error disconnecting: $($_.Exception.Message)",
            "Disconnect Error",
            [System.Windows.Forms.MessageBoxButtons]::OK,
            [System.Windows.Forms.MessageBoxIcon]::Error
        )
    }
    finally {
        Reset-ConnectionState
    }
}

# Function to clear cached credentials
function Clear-CachedCredentials {
    try {
        Update-StatusLabel "Clearing cached credentials..."
        
        # Disconnect first if connected
        if ($global:IsConnected) {
            Disconnect-FromGraph
        }
        
        # Clear token cache
        if (Get-Module Microsoft.Graph.Authentication -ListAvailable) {
            Import-Module Microsoft.Graph.Authentication
            Clear-MgContext
        }
        
        Update-StatusLabel "Cached credentials cleared"
        
        [System.Windows.Forms.MessageBox]::Show(
            "Cached credentials have been cleared. You can now try connecting again.",
            "Credentials Cleared",
            [System.Windows.Forms.MessageBoxButtons]::OK,
            [System.Windows.Forms.MessageBoxIcon]::Information
        )
    }
    catch {
        [System.Windows.Forms.MessageBox]::Show(
            "Error clearing credentials: $($_.Exception.Message)",
            "Clear Credentials Error",
            [System.Windows.Forms.MessageBoxButtons]::OK,
            [System.Windows.Forms.MessageBoxIcon]::Error
        )
    }
}

# Function to export user details
function Export-UserDetails {
    if ([string]::IsNullOrWhiteSpace($nameTextBox.Text)) {
        [System.Windows.Forms.MessageBox]::Show(
            "No user data to export.",
            "No Data",
            [System.Windows.Forms.MessageBoxButtons]::OK,
            [System.Windows.Forms.MessageBoxIcon]::Warning
        )
        return
    }
    
    $saveFileDialog = New-Object System.Windows.Forms.SaveFileDialog
    $saveFileDialog.Filter = "Text Files (*.txt)|*.txt|CSV Files (*.csv)|*.csv"
    $saveFileDialog.Title = "Export User Details"
    $saveFileDialog.FileName = "User_$($upnTextBox.Text -replace '@.*', '')_$(Get-Date -Format 'yyyyMMdd_HHmmss')"
    
    if ($saveFileDialog.ShowDialog() -eq [System.Windows.Forms.DialogResult]::OK) {
        try {
            $details = @"
Display Name: $($nameTextBox.Text)
User Principal Name: $($upnTextBox.Text)
Email: $($emailTextBox.Text)
Department: $($departmentTextBox.Text)
Job Title: $($jobTitleTextBox.Text)
Account Enabled: $($enabledTextBox.Text)
Company: $($companyTextBox.Text)
Country: $($countryTextBox.Text)
City: $($cityTextBox.Text)
Office Location: $($officeTextBox.Text)
Mobile Phone: $($mobileTextBox.Text)
Business Phones: $($businessPhoneTextBox.Text)
Created: $($createdTextBox.Text)
Last Sign In: $($lastSignInTextBox.Text)
User ID: $($userIdTextBox.Text)
"@
            
            [System.IO.File]::WriteAllText($saveFileDialog.FileName, $details)
            
            [System.Windows.Forms.MessageBox]::Show(
                "User details exported successfully to: $($saveFileDialog.FileName)",
                "Export Complete",
                [System.Windows.Forms.MessageBoxButtons]::OK,
                [System.Windows.Forms.MessageBoxIcon]::Information
            )
        }
        catch {
            [System.Windows.Forms.MessageBox]::Show(
                "Error exporting user details: $($_.Exception.Message)",
                "Export Error",
                [System.Windows.Forms.MessageBoxButtons]::OK,
                [System.Windows.Forms.MessageBoxIcon]::Error
            )
        }
    }
}

# Create the main form
$form = New-Object System.Windows.Forms.Form
$form.Text = "Entra ID User Lookup"
$form.Size = New-Object System.Drawing.Size(620, 780)
$form.StartPosition = [System.Windows.Forms.FormStartPosition]::CenterScreen
$form.FormBorderStyle = [System.Windows.Forms.FormBorderStyle]::FixedDialog
$form.MaximizeBox = $false

# Create connection panel
$connectionPanel = New-Object System.Windows.Forms.GroupBox
$connectionPanel.Text = "Connection"
$connectionPanel.Size = New-Object System.Drawing.Size(580, 80)
$connectionPanel.Location = New-Object System.Drawing.Point(10, 10)

$connectionLabel = New-Object System.Windows.Forms.Label
$connectionLabel.Text = "Not Connected"
$connectionLabel.Location = New-Object System.Drawing.Point(10, 25)
$connectionLabel.Size = New-Object System.Drawing.Size(300, 20)
$connectionLabel.ForeColor = [System.Drawing.Color]::Red
$connectionPanel.Controls.Add($connectionLabel)

$connectButton = New-Object System.Windows.Forms.Button
$connectButton.Text = "Connect"
$connectButton.Location = New-Object System.Drawing.Point(10, 50)
$connectButton.Size = New-Object System.Drawing.Size(80, 25)
$connectButton.Add_Click({ Connect-ToGraph })
$connectionPanel.Controls.Add($connectButton)

$disconnectButton = New-Object System.Windows.Forms.Button
$disconnectButton.Text = "Disconnect"
$disconnectButton.Location = New-Object System.Drawing.Point(100, 50)
$disconnectButton.Size = New-Object System.Drawing.Size(80, 25)
$disconnectButton.Enabled = $false
$disconnectButton.Add_Click({ Disconnect-FromGraph })
$connectionPanel.Controls.Add($disconnectButton)

$clearCredsButton = New-Object System.Windows.Forms.Button
$clearCredsButton.Text = "Clear Creds"
$clearCredsButton.Location = New-Object System.Drawing.Point(190, 50)
$clearCredsButton.Size = New-Object System.Drawing.Size(80, 25)
$clearCredsButton.Add_Click({ Clear-CachedCredentials })
$connectionPanel.Controls.Add($clearCredsButton)

$cancelButton = New-Object System.Windows.Forms.Button
$cancelButton.Text = "Cancel"
$cancelButton.Location = New-Object System.Drawing.Point(280, 50)
$cancelButton.Size = New-Object System.Drawing.Size(80, 25)
$cancelButton.Enabled = $false
$cancelButton.Visible = $false
$cancelButton.Add_Click({ Cancel-Connection })
$connectionPanel.Controls.Add($cancelButton)

$form.Controls.Add($connectionPanel)

# Create search panel
$searchPanel = New-Object System.Windows.Forms.GroupBox
$searchPanel.Text = "User Search"
$searchPanel.Size = New-Object System.Drawing.Size(580, 80)
$searchPanel.Location = New-Object System.Drawing.Point(10, 100)

$usernameLabel = New-Object System.Windows.Forms.Label
$usernameLabel.Text = "Username:"
$usernameLabel.Location = New-Object System.Drawing.Point(10, 25)
$usernameLabel.Size = New-Object System.Drawing.Size(80, 20)
$searchPanel.Controls.Add($usernameLabel)

$usernameTextBox = New-Object System.Windows.Forms.TextBox
$usernameTextBox.Location = New-Object System.Drawing.Point(100, 22)
$usernameTextBox.Size = New-Object System.Drawing.Size(250, 20)
$usernameTextBox.Add_KeyDown({
    if ($_.KeyCode -eq [System.Windows.Forms.Keys]::Enter) {
        Search-SpecificUser $usernameTextBox.Text
    }
})
$searchPanel.Controls.Add($usernameTextBox)

$searchButton = New-Object System.Windows.Forms.Button
$searchButton.Text = "Search"
$searchButton.Location = New-Object System.Drawing.Point(10, 50)
$searchButton.Size = New-Object System.Drawing.Size(80, 25)
$searchButton.Enabled = $false
$searchButton.Add_Click({ Search-SpecificUser $usernameTextBox.Text })
$searchPanel.Controls.Add($searchButton)

$clearButton = New-Object System.Windows.Forms.Button
$clearButton.Text = "Clear"
$clearButton.Location = New-Object System.Drawing.Point(100, 50)
$clearButton.Size = New-Object System.Drawing.Size(80, 25)
$clearButton.Add_Click({ 
    $usernameTextBox.Clear()
    Clear-UserDetails
})
$searchPanel.Controls.Add($clearButton)

$exportButton = New-Object System.Windows.Forms.Button
$exportButton.Text = "Export"
$exportButton.Location = New-Object System.Drawing.Point(190, 50)
$exportButton.Size = New-Object System.Drawing.Size(80, 25)
$exportButton.Enabled = $false
$exportButton.Add_Click({ Export-UserDetails })
$searchPanel.Controls.Add($exportButton)

$form.Controls.Add($searchPanel)

# Create user details panel
$detailsPanel = New-Object System.Windows.Forms.GroupBox
$detailsPanel.Text = "User Details"
$detailsPanel.Size = New-Object System.Drawing.Size(580, 400)
$detailsPanel.Location = New-Object System.Drawing.Point(10, 190)

# Helper function to create label and textbox pairs
function Create-LabelTextBoxPair {
    param([string]$LabelText, [int]$Y)
    
    $label = New-Object System.Windows.Forms.Label
    $label.Text = $LabelText
    $label.Location = New-Object System.Drawing.Point(10, $Y)
    $label.Size = New-Object System.Drawing.Size(120, 20)
    $detailsPanel.Controls.Add($label)
    
    $textBox = New-Object System.Windows.Forms.TextBox
    $textBox.Location = New-Object System.Drawing.Point(140, $Y)
    $textBox.Size = New-Object System.Drawing.Size(420, 20)
    $textBox.ReadOnly = $true
    $detailsPanel.Controls.Add($textBox)
    
    return $textBox
}

# Create all the detail fields
$nameTextBox = Create-LabelTextBoxPair "Display Name:" 25
$upnTextBox = Create-LabelTextBoxPair "User Principal Name:" 50
$emailTextBox = Create-LabelTextBoxPair "Email:" 75
$departmentTextBox = Create-LabelTextBoxPair "Department:" 100
$jobTitleTextBox = Create-LabelTextBoxPair "Job Title:" 125
$enabledTextBox = Create-LabelTextBoxPair "Account Enabled:" 150
$companyTextBox = Create-LabelTextBoxPair "Company:" 175
$countryTextBox = Create-LabelTextBoxPair "Country:" 200
$cityTextBox = Create-LabelTextBoxPair "City:" 225
$officeTextBox = Create-LabelTextBoxPair "Office Location:" 250
$mobileTextBox = Create-LabelTextBoxPair "Mobile Phone:" 275
$businessPhoneTextBox = Create-LabelTextBoxPair "Business Phones:" 300
$createdTextBox = Create-LabelTextBoxPair "Created:" 325
$lastSignInTextBox = Create-LabelTextBoxPair "Last Sign In:" 350
$userIdTextBox = Create-LabelTextBoxPair "User ID:" 375

$form.Controls.Add($detailsPanel)

# Create status bar
$statusLabel = New-Object System.Windows.Forms.Label
$statusLabel.Text = "Ready - Please connect to Microsoft Graph"
$statusLabel.Location = New-Object System.Drawing.Point(10, 630)
$statusLabel.Size = New-Object System.Drawing.Size(580, 20)
$statusLabel.BorderStyle = [System.Windows.Forms.BorderStyle]::Fixed3D
$form.Controls.Add($statusLabel)

# Add form closing event
$form.Add_FormClosing({
    # Disconnect if connected
    if ($global:IsConnected) {
        try {
            Disconnect-MgGraph -ErrorAction SilentlyContinue
        }
        catch {
            # Ignore disconnect errors during form closing
        }
    }
})

# Show the form
[System.Windows.Forms.Application]::EnableVisualStyles()
$form.ShowDialog()
